@use "sass:map";
@use '../design-system' as *;

.breadcrumbs {
    margin-bottom: 1rem;

    a {
        color: $primary;
    }
}

.reference {
    &__required {
        color: red;
    }

    &__name-cell__wrap {
        width: 100%;
    }
}

.apiReferenceOuter {
    container-type: inline-size;
}

.apiReference {
    @container (max-width: 640px) {
        display: block;

        thead,
        tbody,
        tr,
        td:not(.expander) {
            display: block;
            width: 100%;
        }

        tr {
            padding-top: $size-1 !important; // !important for .ag-styles specificity
            padding-bottom: $size-1 !important; // !important for .ag-styles specificity
        }

        td {
            padding-right: $size-1 !important; // !important for .ag-styles specificity
            padding-left: $size-1 !important; // !important for .ag-styles specificity
            border: none !important; // !important for .ag-styles specificity
        }
    }

    @container (min-width: 640px) {
        height: 1px; // needed for divs to fit table cell heights correctly
    }

    tr:nth-child(even) pre:global(.code),
    tr:nth-child(even) code {
        background-color: white;
    }

    pre:global(.code) {
        margin-top: $size-2;
        margin-bottom: $size-1;
    }

    :global(a.docs-header-icon) {
        font-size: var(--font-size-large) !important; // !important for .ag-styles specificity
    }
}

.expander {
    padding: 0 !important;
    width: 18px !important;

    @container (max-width: 640px) {
        display: none;
    }
}

.expanderInner {
    height: 100%;
    background-color: #{rgba(map.get($abstract-colors, azure-blue), 0.025)};
    border-right: 1px solid var(--bright-blue-gray);
    transition: background-color $default-transition-timing;
    cursor: pointer;

    svg {
        fill: var(--link-color);
        width: 1em;
        margin-left: 0.125em;
        margin-top: 0.3125em;
        transition: fill $default-transition-timing, transform $default-transition-timing;
    }

    &:hover {
        background-color: #{rgba(map.get($abstract-colors, azure-blue), 0.05)};

        svg {
            fill: var(--link-hover-color);
        }
    }

    &.isExpanded svg {
        transform: rotate(90deg);
    }
}

.name {
    font-weight: var(--font-weight-normal) !important; // !important for .ag-styles specificity;
    word-break: keep-all;
    word-wrap: normal;

    code {
        font-size: var(--font-size-large) !important; // !important for .ag-styles specificity;

        @container (min-width: 640px) {
            font-size: var(--font-size-medium) !important; // !important for .ag-styles specificity;
        }
    }
}

.nameWrap {
    word-break: break-word;
}

.metaList {
    display: flex;
    flex-wrap: wrap;
    gap: $size-1 $size-3;
}

.metaItem {
    display: flex;
    flex-direction: column;
}

.metaLabel {
    font-size: var(--font-size-extra-small);
    color: var(--secondary-text-color);
}

.metaValue {
    font-size: var(--font-size-small);
    font-family: var(--monospace-font-family);
    color: var(--code-text-color);
}

.description {
    padding-top: $size-half;
}

.mobileSeeMore {
    --text-color: var(--link-color);
    --icon-size: 1em;

    margin-top: $size-1;
    transition: color $default-transition-timing;
    cursor: pointer;

    &:hover {
        --text-color: var(--link-hover-color);
    }

    @container (min-width: 640px) {
        display: none;
    }

    svg {
        transition: fill $default-transition-timing;
    }
}
